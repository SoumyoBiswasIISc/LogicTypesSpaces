---
layout: post
title: "A program"
date: 2015-01-13 15:11:46 +0530
comments: true
published: false
categories:
---

We consider next another function illustrating how we can implement a combination of nested loops and conditions. Specifically, suppose we are given two lists $xs$ and $ys$. We construct the list of all sums $x + y$ with $x$ in $xs$, $y$ in $ys$ and $x \leq y$.

We first define a function $leq$, denoting less than or equal to, for natural number. We have reserved $\leq$ for something nicer. This is a recursive definition.

```haskell
_leq_ : ℕ → ℕ → Bool
zero leq _ = true
(succ n) leq zero = false
(succ n) leq (succ m) = n leq m
```

We can now construct the function we promised. For each $x$ in $xs$, we construct a list by first filtering $ys$ by the condition $x \leq y$ and then mapping $y$ to $x + y$.

```haskell
eglist : List ℕ → List ℕ → List ℕ
eglist xs ys = xs flatMap (λ x → (ys filter (λ y → x leq y))  map (λ y → x + y))
```

Note that we could replace the filtering by the simpler expression,

```haskell
(ys filter (_leq_ x))
```


We have used _map_, _flatMap_ and _filter_ to replace nested loops and control statements (_if_ in this case) in older programming languages. In imperative code we would have started with an empty list, used a loop for cycling through $ys$ inside one for cycling through $xs$ and added an element $x + y$ if it satisfied the condition $x \leq y$.
